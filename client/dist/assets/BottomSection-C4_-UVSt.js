import{R as se,r as n,u as ae,a as f,j as s}from"./index-DX85qj1P.js";const re=({currentStudentId:L=null,user:U=null})=>{const[S,O]=n.useState([]),[v,B]=n.useState([]),[j,_]=n.useState(null),[c,V]=n.useState({id:null,name:null}),[b,T]=n.useState(!0),[ne,A]=n.useState(0),[G,Y]=n.useState(!1),{showError:K}=ae(),N=L||U?.id,d="http://localhost:5048/api",M=3,W=1e3,u=n.useRef(null),g=n.useRef(!0),E=n.useRef(null);n.useEffect(()=>{const e=new IntersectionObserver(([a])=>{a.isIntersecting&&(Y(!0),e.disconnect())},{threshold:.1});return E.current&&e.observe(E.current),()=>e.disconnect()},[]);const x=n.useCallback((e,a=[])=>{if(console.log("Extracting array from:",e),Array.isArray(e))return console.log("Data is already an array"),e;for(const t of["$values","teamMembers","data",...a])if(e?.[t]&&Array.isArray(e[t]))return console.log(`Found array in key: ${t}`),e[t];return console.log("No array found, returning empty array"),[]},[]),k=n.useCallback(e=>{if(console.log("🔍 Extracting reviewers from:",e),console.log("🔍 Reviewers data type:",typeof e),console.log("🔍 Reviewers data keys:",Object.keys(e||{})),Array.isArray(e))return console.log("✅ Reviewers data is already an array"),e;for(const a of["$values","reviewers","data"])if(e?.[a]&&Array.isArray(e[a]))return console.log(`✅ Found reviewers array in key: ${a}`),console.log(`✅ Array length: ${e[a].length}`),e[a];return console.log("❌ No reviewers array found, returning empty array"),[]},[]),X=n.useCallback(e=>{const t={1:"Engineer",2:"Engineer",3:"Engineer",4:"Engineer",5:"Engineer",6:"Engineer",7:"Engineer",8:"Engineer",9:"Engineer",10:"Engineer"}[e.roleId]||"Engineer";return console.log(`Reviewer ${e.fullNameEn} has roleId ${e.roleId}, mapped to: ${t}`),t},[]),p=n.useCallback(async(e=0)=>{u.current&&u.current.abort(),u.current=new AbortController;try{const a={signal:u.current.signal,timeout:15e3},[t,z]=await Promise.all([f.get(`${d}/TeamMembers`,a),f.get(`${d}/Teams`,a)]);console.log("Team members response:",t.data);const w=x(t.data);if(console.log("Extracted team members:",w),!g.current)return;const y=w.find(r=>r.teamMemberAccountId===N);if(console.log("Current student team:",y),console.log("All team members:",w),!y)throw new Error(`No team found for student ID: ${N}`);const H=w.filter(r=>r.teamId===y.teamId),m=x(z.data).find(r=>r.id===y.teamId);console.log("Team data:",m),console.log("Team classId:",m?.classId),console.log("Team ClassId:",m?.ClassId),console.log("Team className:",m?.className),console.log("Team ClassName:",m?.ClassName);const J=H.map(async r=>{try{return{name:(await f.get(`${d}/Account/${r.teamMemberAccountId}`,a)).data?.fullNameEn||"Unknown",role:r.teamMemberDescription||"Team Member",accountId:r.teamMemberAccountId}}catch(l){return console.warn(`Failed to fetch member ${r.teamMemberAccountId}:`,l),{name:"Unknown Member",id:"N/A",role:"Team Member",accountId:r.teamMemberAccountId}}}),Q=await Promise.all(J);if(!g.current)return;O(Q);let i=m?.classId,I=m?.className;if(console.log("Initial classId from team:",i),console.log("Initial className from team:",I),!i)try{const r=await f.get(`${d}/Dashboard/Student/${N}`,a);r.data?.StudentExtension?.ClassId&&(i=r.data.StudentExtension.ClassId,console.log("Got classId from student extension:",i))}catch(r){console.warn("Error fetching student extension:",r)}console.log("Final classId for reviewers:",i),console.log("Final className for reviewers:",I),!I&&i&&console.log(`No className available for classId: ${i}. The ClassController doesn't have a GET by ID endpoint.`),V({id:i,name:I});const R=[];i?(console.log(`🔍 Fetching reviewers for classId: ${i}`),R.push(f.get(`${d}/Account/Reviewers/ByClass/${i}`,a).then(r=>{console.log("✅ Reviewers API call successful!"),console.log("📊 Reviewers response:",r.data),console.log("🔍 Reviewers response type:",typeof r.data),console.log("🔑 Reviewers response keys:",Object.keys(r.data||{}));const l=k(r.data);if(console.log("📋 Extracted reviewers array:",l),console.log("📋 Reviewers array length:",l.length),console.log("👥 All reviewers with role IDs:",l.map(o=>({id:o.id,name:o.fullNameEn,roleId:o.roleId,assignedClassId:o.AssignedClassId,rawData:o}))),console.log("🔍 Raw reviewer data structure:",l.map(o=>({allKeys:Object.keys(o),allValues:Object.values(o)}))),l.some(o=>o.email==="ahmed@example.com"||o.email==="sarah@example.com"))return console.log("⚠️ API returned sample data - no real reviewers found for this class"),[];console.log("✅ All reviewers from API are valid (already filtered by class)");const P=l;console.log("✅ Filtered reviewers count:",P.length);const $=P.map(o=>{const D={name:o.fullNameEn||"Unknown Reviewer",role:o.AccountType?.AccountTypeName||"Reviewer",id:o.accountId||o.id,assignedClassId:i};return console.log("🔄 Mapped reviewer:",D),D});return console.log("🎯 Final mapped reviewers:",$),console.log("🎯 Final reviewers count:",$.length),$}).catch(r=>(console.warn("Error fetching reviewers:",r),[])))):R.push(Promise.resolve([])),R.push(f.get(`${d}/Account/CapstoneSupervisors`,a).then(r=>{console.log("Capstone supervisors response:",r.data);const l=x(r.data);return l&&l.length>0?l.map(h=>({name:h.fullNameEn||h.fullNameAr||"Unknown Supervisor",role:"Capstone Supervisor",id:h.id||h.accountId})):[{name:"RawaN",role:"Capstone Supervisor",id:"RawaN"}]}).catch(r=>(console.warn("Error fetching capstone supervisors:",r),[{name:"RawaN",role:"Capstone Supervisor",id:"RawaN"}])));const[Z,ee]=await Promise.all(R);if(!g.current)return;B(Z),_(ee),T(!1),A(0)}catch(a){console.error("Error fetching team data:",a),e<M&&g.current?(console.log(`Retrying... Attempt ${e+1}/${M}`),A(e+1),setTimeout(()=>{g.current&&p(e+1)},W*(e+1))):(K(a.message||"Failed to load team data"),T(!1))}},[N,d,x,k,X]);n.useEffect(()=>(p(),()=>{g.current=!1,u.current&&u.current.abort()}),[p]),n.useCallback(()=>{A(0),p()},[p]);const C=e=>s.jsxs("div",{className:"loading-container",role:"status","aria-label":e,children:[s.jsx("div",{className:"loading-spinner","aria-hidden":"true"}),s.jsxs("div",{className:"loading-text",children:[s.jsx("span",{className:"loading-title",children:e}),s.jsx("span",{className:"loading-subtitle",children:"Please wait..."})]})]}),F=e=>s.jsxs("div",{className:"no-data",role:"status","aria-label":e,children:[s.jsx("div",{className:"no-data-icon","aria-hidden":"true",children:"📋"}),s.jsx("span",{children:e})]}),q=()=>{if(console.log("renderReviewersSection - Debug info:",{loading:b,teamClassInfo:c,reviewers:v,reviewersLength:v.length}),b)return C("Loading reviewers");if(!c.id)return s.jsxs("div",{className:"no-data",role:"status","aria-label":"No class assigned",children:[s.jsx("div",{className:"no-data-icon","aria-hidden":"true",children:"🏫"}),s.jsx("span",{children:"No class assigned to this team"})]});if(v.length===0)return s.jsxs("div",{className:"no-data",role:"status","aria-label":"No reviewers for class",children:[s.jsx("div",{className:"no-data-icon","aria-hidden":"true",children:"👥"}),s.jsxs("span",{children:["No reviewers assigned to class: ",c.name||`Class ${c.id}`]})]});console.log("🔍 Reviewers are already filtered by class from API"),console.log("🔍 Team class info:",c),console.log("🔍 All available reviewers:",v);const e=v;return console.log("✅ All reviewers are assigned to this class:",e),console.log("✅ Reviewers count:",e.length),e.length===0?s.jsxs("div",{className:"no-data",role:"status","aria-label":"Reviewers not assigned to team class",children:[s.jsx("div",{className:"no-data-icon","aria-hidden":"true",children:"⚠️"}),s.jsxs("span",{children:["Reviewers are not assigned to class: ",c.name||`Class ${c.id}`]})]}):s.jsx(s.Fragment,{children:e.map((a,t)=>s.jsxs("div",{className:"reviewer",role:"listitem",tabIndex:"0","aria-label":`Reviewer: ${a.name}, Role: ${a.role}`,children:[s.jsx("div",{className:"reviewer-avatar","aria-hidden":"true",children:a.name.charAt(0).toUpperCase()}),s.jsxs("div",{className:"reviewer-info",children:[s.jsx("span",{className:"reviewer-name",children:a.name}),s.jsx("span",{className:"reviewer-role",children:a.role})]})]},a.id||t))})};return s.jsxs("section",{ref:E,className:`bottom-section ${G?"visible":""}`,role:"region","aria-label":"Team information",children:[s.jsxs("article",{className:"section-card ","aria-labelledby":"team-members-title",children:[s.jsx("h3",{id:"team-members-title",className:"section-title",children:"Team Members"}),s.jsx("div",{className:"team-members",role:"list","aria-label":"Team members list",children:b?C("Loading team members"):S.length>0?S.map((e,a)=>s.jsxs("div",{className:"team-member",role:"listitem",tabIndex:"0","aria-label":`Team member: ${e.name}, ID: ${e.id}, Role: ${e.role}`,children:[s.jsx("div",{className:"member-avatar","aria-hidden":"true",children:e.name.charAt(0).toUpperCase()}),s.jsxs("div",{className:"member-info",children:[s.jsx("span",{className:"member-name",children:e.name}),s.jsx("span",{className:"member-id",children:e.id}),s.jsx("span",{className:"member-role",children:e.role})]})]},e.accountId||a)):F("No team members found")})]}),s.jsxs("article",{className:"section-card reviewers-card","aria-labelledby":"reviewers-title",children:[s.jsx("h3",{id:"reviewers-title",className:"section-title",children:"Reviewers"}),s.jsx("div",{className:"reviewers",role:"list","aria-label":"Reviewers list",children:q()})]}),s.jsxs("article",{className:"section-card supervisor-card","aria-labelledby":"supervisor-title",children:[s.jsx("h3",{id:"supervisor-title",className:"section-title",children:"Capstone Supervisor"}),s.jsx("div",{className:"supervisor-container",children:b?C("Loading supervisor"):j&&j.length>0?j.map((e,a)=>s.jsxs("div",{className:"supervisor",tabIndex:"0","aria-label":`Supervisor: ${e.name}, Role: ${e.role}`,children:[s.jsx("div",{className:"supervisor-avatar","aria-hidden":"true",children:e.name.charAt(0).toUpperCase()}),s.jsxs("div",{className:"supervisor-info",children:[s.jsx("span",{className:"supervisor-name",children:e.name}),s.jsx("span",{className:"supervisor-role",children:e.role})]})]},e.id||a)):F("No supervisor assigned")})]})]})},te=se.memo(re);export{te as default};
