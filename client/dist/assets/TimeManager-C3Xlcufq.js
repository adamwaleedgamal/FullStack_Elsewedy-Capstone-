import{r as p,j as r,a as c,S as k}from"./index-DX85qj1P.js";const d="http://localhost:5048/api",B=({currentStudentId:u,user:L=null})=>{const[I,f]=p.useState(0),[N,b]=p.useState(0),[v,h]=p.useState(0),[_,M]=p.useState(!0),[w,y]=p.useState({completed:0,submitted:0,submittedLate:0,completedLate:0});return p.useEffect(()=>{(async()=>{if(u)try{M(!0),console.log("TimeManager - Starting task progress fetch for user:",u);let o=null;try{const t=await c.get(`${d}/Teams/ByLeader/${u}`);t.data&&(o=t.data,console.log("TimeManager - Found team by leader:",o))}catch{console.log("TimeManager - User is not a team leader, checking team membership...")}if(!o)try{const e=(await c.get(`${d}/TeamMembers`)).data,n=(Array.isArray(e)?e:e?.$values||[]).find(i=>i.teamMemberAccountId===u);n&&(o=(await c.get(`${d}/Teams/${n.teamId}`)).data,console.log("TimeManager - Found team by membership:",o))}catch(t){console.error("TimeManager - Error finding team membership:",t)}if(!o){console.log("TimeManager - No team found for user"),b(0),h(0),f(0),M(!1);return}let a=[];try{let t=null;try{const e=await c.get(`${d}/StudentExtensions/${u}`);if(e.data&&e.data.classId){const s=await c.get(`${d}/Classes/${e.data.classId}`);s.data&&s.data.gradeId&&(t=s.data.gradeId,console.log("TimeManager - Found user grade ID:",t))}}catch{console.log("TimeManager - Could not get user grade from student extension")}if(t){const s=(await c.get(`${d}/AccountTask/ByGrade/${t}`)).data;a=Array.isArray(s)?s:s?.$values||s?.data||[],console.log("TimeManager - Grade-specific tasks from ByGrade endpoint:",a)}else{const s=(await c.get(`${d}/AccountTask/StudentTasks/${u}`)).data;a=Array.isArray(s)?s:s?.$values||s?.data||[],console.log("TimeManager - Grade-specific tasks from StudentTasks endpoint:",a)}}catch(t){console.error("TimeManager - Error fetching grade tasks:",t);try{const s=(await c.get(`${d}/AccountTask`)).data,n=Array.isArray(s)?s:s?.$values||s?.data||[];let i=null;if(o.classId)try{const m=await c.get(`${d}/Classes/${o.classId}`);m.data&&m.data.gradeId&&(i=m.data.gradeId)}catch{}i?(a=n.filter(m=>m.gradeId===i),console.log("TimeManager - Filtered tasks by grade:",a)):(a=n,console.log("TimeManager - Using all tasks as fallback:",a))}catch(e){console.error("TimeManager - Error in fallback task fetching:",e)}}if(a&&a.length>0){const e=(await c.get(`${d}/TaskSubmissions`)).data,n=(Array.isArray(e)?e:e?.$values||[]).filter(g=>g.teamId===o.id);console.log("TimeManager - Team submissions:",n);const i=a.length,m=a.filter(g=>{const l=n.find(T=>T.taskId===g.id);return l&&l.statusId===k.TASK_COMPLETED}).length,R=a.filter(g=>{const l=n.find(T=>T.taskId===g.id);return l&&l.statusId===k.TASK_SUBMITTED_ON_TIME}).length,A=a.filter(g=>{const l=n.find(T=>T.taskId===g.id);return l&&l.statusId===k.TASK_SUBMITTED_LATE}).length,x=a.filter(g=>{const l=n.find(T=>T.taskId===g.id);return l&&l.statusId===k.TASK_COMPLETED_LATE}).length,$=m+x,S=R+A,E=$+S;console.log("TimeManager - Total grade tasks:",i),console.log("TimeManager - Status counts:",{completedOnTime:m,submittedOnTime:R,submittedLate:A,completedLate:x,completed:$,submitted:S,totalSubmitted:E});const j=i>0?Math.round(E/i*100):0;console.log("TimeManager - Calculated percentage:",j),b(i),h(E),f(j),y({completed:$,submitted:S,submittedLate:A,completedLate:x})}else console.log("TimeManager - No grade-specific tasks found"),b(0),h(0),f(0),y({completed:0,submitted:0,submittedLate:0,completedLate:0})}catch(o){console.error("TimeManager - Error fetching task progress:",o),console.log("TimeManager - Error response:",o.response?.data),f(0),b(0),h(0),y({completed:0,submitted:0,submittedLate:0,completedLate:0})}finally{M(!1)}})()},[u,L]),_?r.jsx("div",{className:"time-manager",children:r.jsxs("div",{className:"time-manager-header",children:[r.jsx("h3",{children:"Time Manager"}),r.jsx("span",{className:"time-manager-subtitle",children:"Loading progress..."})]})}):r.jsxs("div",{className:"time-manager",children:[r.jsxs("div",{className:"time-manager-header",children:[r.jsx("h3",{children:"Time Manager"}),r.jsx("span",{className:"time-manager-subtitle",children:"Your progress"})]}),r.jsxs("div",{className:"progress-container",children:[r.jsx("div",{className:"progress-bar",children:r.jsx("div",{className:"progress-fill",style:{width:`${I}%`}})}),r.jsxs("span",{className:"progress-text",children:[I,"% submitted"]})]}),r.jsx("div",{className:"task-summary",children:r.jsxs("p",{children:[v," of ",N," tasks submitted"]})})]})};export{B as default};
